import numpy as np

from scipy.optimize import minimize
import matplotlib.pyplot as plt
import mdp
from matplotlib.mlab import PCA

precision = 5*10**(-16) # set numerical precision
epsilon_eig_val = 10**(-17) # set cut of eigenvalues
espilon_lin_approx = 10**(-15) # set epsilon for error of tangent cone
delta = 1 #set delta corresponding to epsilon of tangent cone
eta = 10**(-5)
#parameters for backtracking in newtons method
alpha = .000001
beta =.5

#theoretically for given epsilon there is a delta, such that each point in a delta neighborhood around x_0 has error less than epsilon to tangent cone


def f_energy(x):
    e =((-x[0] + 0.9)**2 + (-x[1] + 0.5)**2 + (-x[2] - x[66] + 0.75)**2 - 0.1075)**2 + ((x[0] - x[11])**2 + (-x[12] + x[1])**2 + (-x[13] + x[2])**2 - 0.3025)**2 + ((x[0] - x[3])**2 + (x[1] - 0.5)**2 + (x[2] - x[4])**2 - 0.1075)**2 + ((-x[10] + x[7])**2 + (x[5] - x[8])**2 + (x[6] - x[9])**2 - 0.3025)**2 + ((x[10] - x[25])**2 + (-x[23] + x[8])**2 + (-x[24] + x[9])**2 - 0.1075)**2 + ((x[10] - x[64])**2 + (-x[63] + x[9])**2 + (-delta - x[62] + x[8])**2 - 0.1075)**2 + ((x[11] - x[29])**2 + (x[12] - x[30])**2 + (x[13] - x[31])**2 - 0.1075)**2 + ((x[12] - x[60])**2 + (-delta + x[11] - x[59])**2 + (x[13] - x[61] + x[66])**2 - 0.1075)**2 + ((x[14] - x[20])**2 + (x[15] - x[21])**2 + (x[16] - x[22])**2 - 0.1075)**2 + ((x[14] - x[56])**2 + (x[15] - x[57])**2 + (x[16] - x[58])**2 - 0.1075)**2 + ((-x[15] + 0.5)**2 + (-x[16] + x[4])**2 + (-delta - x[14] + x[3])**2 - 0.3025)**2 + ((-x[17] + 0.35)**2 + (-x[18] + 0.5)**2 + (-x[19] + 0.75)**2 - 0.1075)**2 + ((x[17] - x[23])**2 + (x[18] - x[24])**2 + (x[19] - x[25])**2 - 0.3025)**2 + ((x[17] - x[53])**2 + (x[19] - x[55])**2 + (x[18] - x[54] - x[65])**2 - 0.1075)**2 + ((x[20] - x[62])**2 + (x[21] - x[63])**2 + (x[22] - x[64])**2 - 0.3025)**2 + ((-x[22] + x[49])**2 + (-delta - x[20] + x[47])**2 + (-x[21] + x[48] + x[65])**2 - 0.1075)**2 + ((x[23] - x[50])**2 + (x[24] - x[51])**2 + (x[25] - x[52])**2 - 0.1075)**2 + ((-x[26] + 0.35)**2 + (-x[27] + 0.5)**2 + (-x[28] + 0.75)**2 - 0.1075)**2 + ((x[26] - x[29])**2 + (x[27] - x[30])**2 + (x[28] - x[31] - x[66])**2 - 0.3025)**2 + ((x[26] - x[53])**2 + (x[27] - x[54])**2 + (x[28] - x[55])**2 - 0.1075)**2 + ((x[29] - x[44])**2 + (x[30] - x[45])**2 + (x[31] - x[46])**2 - 0.1075)**2 + ((-x[32] + x[38])**2 + (-x[34] + x[40])**2 + (-x[33] + x[39] - x[65])**2 - 0.1075)**2 + ((x[32] - x[35])**2 + (x[33] - x[36])**2 + (x[34] - x[37])**2 - 0.1075)**2 + ((x[33] - x[48])**2 + (x[34] - x[49])**2 + (delta + x[32] - x[47])**2 - 0.3025)**2 + ((x[35] - x[41])**2 + (x[36] - x[42])**2 + (x[37] - x[43])**2 - 0.1075)**2 + ((x[35] - x[50])**2 + (x[37] - x[52])**2 + (x[36] - x[51] + x[65])**2 - 0.3025)**2 + ((-x[38] + x[41])**2 + (-x[39] + x[42] + x[65])**2 + (-x[40] + x[43] - x[66])**2 - 0.1075)**2 + ((x[38] - x[44])**2 + (x[40] - x[46])**2 + (x[39] - x[45] - x[65])**2 - 0.3025)**2 + ((x[3] - x[5])**2 + (x[4] - x[7])**2 + (-x[6] + 0.5)**2 - 0.1075)**2 + ((x[41] - x[53])**2 + (x[42] - x[54])**2 + (x[43] - x[55])**2 - 0.3025)**2 + ((x[44] - x[59])**2 + (x[45] - x[60])**2 + (x[46] - x[61] + x[66])**2 - 0.1075)**2 + ((-x[48] + x[57])**2 + (-x[49] + x[58])**2 + (delta - x[47] + x[56])**2 - 0.1075)**2 + ((x[50] - x[62])**2 + (x[51] - x[63])**2 + (x[52] - x[64])**2 - 0.1075)**2 + ((x[56] - x[59])**2 + (x[57] - x[60])**2 + (x[58] - x[61] + x[66])**2 - 0.3025)**2 + ((-x[5] + 0.9)**2 + (-x[6] + 0.5)**2 + (-x[7] + 0.75)**2 - 0.1075)**2
    return e



def gradient(x):
    deriv =[(4*x[0] - 3.6)*((-x[0] + 0.9)**2 + (-x[1] + 0.5)**2 + (-x[2] - x[66] + 0.75)**2 - 0.1075) + (4*x[0] - 4*x[11])*((x[0] - x[11])**2 + (-x[12] + x[1])**2 + (-x[13] + x[2])**2 - 0.3025) + (4*x[0] - 4*x[3])*((x[0] - x[3])**2 + (x[1] - 0.5)**2 + (x[2] - x[4])**2 - 0.1075), (-4*x[12] + 4*x[1])*((x[0] - x[11])**2 + (-x[12] + x[1])**2 + (-x[13] + x[2])**2 - 0.3025) + (4*x[1] - 2.0)*((-x[0] + 0.9)**2 + (-x[1] + 0.5)**2 + (-x[2] - x[66] + 0.75)**2 - 0.1075) + (4*x[1] - 2.0)*((x[0] - x[3])**2 + (x[1] - 0.5)**2 + (x[2] - x[4])**2 - 0.1075), (-4*x[13] + 4*x[2])*((x[0] - x[11])**2 + (-x[12] + x[1])**2 + (-x[13] + x[2])**2 - 0.3025) + (4*x[2] - 4*x[4])*((x[0] - x[3])**2 + (x[1] - 0.5)**2 + (x[2] - x[4])**2 - 0.1075) + (4*x[2] + 4*x[66] - 3.0)*((-x[0] + 0.9)**2 + (-x[1] + 0.5)**2 + (-x[2] - x[66] + 0.75)**2 - 0.1075), (-4*x[0] + 4*x[3])*((x[0] - x[3])**2 + (x[1] - 0.5)**2 + (x[2] - x[4])**2 - 0.1075) + (4*x[3] - 4*x[5])*((x[3] - x[5])**2 + (x[4] - x[7])**2 + (-x[6] + 0.5)**2 - 0.1075) + (-4*delta - 4*x[14] + 4*x[3])*((-x[15] + 0.5)**2 + (-x[16] + x[4])**2 + (-delta - x[14] + x[3])**2 - 0.3025), (-4*x[16] + 4*x[4])*((-x[15] + 0.5)**2 + (-x[16] + x[4])**2 + (-delta - x[14] + x[3])**2 - 0.3025) + (-4*x[2] + 4*x[4])*((x[0] - x[3])**2 + (x[1] - 0.5)**2 + (x[2] - x[4])**2 - 0.1075) + (4*x[4] - 4*x[7])*((x[3] - x[5])**2 + (x[4] - x[7])**2 + (-x[6] + 0.5)**2 - 0.1075), (-4*x[3] + 4*x[5])*((x[3] - x[5])**2 + (x[4] - x[7])**2 + (-x[6] + 0.5)**2 - 0.1075) + (4*x[5] - 3.6)*((-x[5] + 0.9)**2 + (-x[6] + 0.5)**2 + (-x[7] + 0.75)**2 - 0.1075) + (4*x[5] - 4*x[8])*((-x[10] + x[7])**2 + (x[5] - x[8])**2 + (x[6] - x[9])**2 - 0.3025), (4*x[6] - 2.0)*((x[3] - x[5])**2 + (x[4] - x[7])**2 + (-x[6] + 0.5)**2 - 0.1075) + (4*x[6] - 2.0)*((-x[5] + 0.9)**2 + (-x[6] + 0.5)**2 + (-x[7] + 0.75)**2 - 0.1075) + (4*x[6] - 4*x[9])*((-x[10] + x[7])**2 + (x[5] - x[8])**2 + (x[6] - x[9])**2 - 0.3025), (-4*x[10] + 4*x[7])*((-x[10] + x[7])**2 + (x[5] - x[8])**2 + (x[6] - x[9])**2 - 0.3025) + (-4*x[4] + 4*x[7])*((x[3] - x[5])**2 + (x[4] - x[7])**2 + (-x[6] + 0.5)**2 - 0.1075) + (4*x[7] - 3.0)*((-x[5] + 0.9)**2 + (-x[6] + 0.5)**2 + (-x[7] + 0.75)**2 - 0.1075), (-4*x[23] + 4*x[8])*((x[10] - x[25])**2 + (-x[23] + x[8])**2 + (-x[24] + x[9])**2 - 0.1075) + (-4*x[5] + 4*x[8])*((-x[10] + x[7])**2 + (x[5] - x[8])**2 + (x[6] - x[9])**2 - 0.3025) + (-4*delta - 4*x[62] + 4*x[8])*((x[10] - x[64])**2 + (-x[63] + x[9])**2 + (-delta - x[62] + x[8])**2 - 0.1075), (-4*x[24] + 4*x[9])*((x[10] - x[25])**2 + (-x[23] + x[8])**2 + (-x[24] + x[9])**2 - 0.1075) + (-4*x[63] + 4*x[9])*((x[10] - x[64])**2 + (-x[63] + x[9])**2 + (-delta - x[62] + x[8])**2 - 0.1075) + (-4*x[6] + 4*x[9])*((-x[10] + x[7])**2 + (x[5] - x[8])**2 + (x[6] - x[9])**2 - 0.3025), (4*x[10] - 4*x[25])*((x[10] - x[25])**2 + (-x[23] + x[8])**2 + (-x[24] + x[9])**2 - 0.1075) + (4*x[10] - 4*x[64])*((x[10] - x[64])**2 + (-x[63] + x[9])**2 + (-delta - x[62] + x[8])**2 - 0.1075) + (4*x[10] - 4*x[7])*((-x[10] + x[7])**2 + (x[5] - x[8])**2 + (x[6] - x[9])**2 - 0.3025), (-4*x[0] + 4*x[11])*((x[0] - x[11])**2 + (-x[12] + x[1])**2 + (-x[13] + x[2])**2 - 0.3025) + (4*x[11] - 4*x[29])*((x[11] - x[29])**2 + (x[12] - x[30])**2 + (x[13] - x[31])**2 - 0.1075) + (-4*delta + 4*x[11] - 4*x[59])*((x[12] - x[60])**2 + (-delta + x[11] - x[59])**2 + (x[13] - x[61] + x[66])**2 - 0.1075), (4*x[12] - 4*x[1])*((x[0] - x[11])**2 + (-x[12] + x[1])**2 + (-x[13] + x[2])**2 - 0.3025) + (4*x[12] - 4*x[30])*((x[11] - x[29])**2 + (x[12] - x[30])**2 + (x[13] - x[31])**2 - 0.1075) + (4*x[12] - 4*x[60])*((x[12] - x[60])**2 + (-delta + x[11] - x[59])**2 + (x[13] - x[61] + x[66])**2 - 0.1075), (4*x[13] - 4*x[2])*((x[0] - x[11])**2 + (-x[12] + x[1])**2 + (-x[13] + x[2])**2 - 0.3025) + (4*x[13] - 4*x[31])*((x[11] - x[29])**2 + (x[12] - x[30])**2 + (x[13] - x[31])**2 - 0.1075) + (4*x[13] - 4*x[61] + 4*x[66])*((x[12] - x[60])**2 + (-delta + x[11] - x[59])**2 + (x[13] - x[61] + x[66])**2 - 0.1075), (4*x[14] - 4*x[20])*((x[14] - x[20])**2 + (x[15] - x[21])**2 + (x[16] - x[22])**2 - 0.1075) + (4*x[14] - 4*x[56])*((x[14] - x[56])**2 + (x[15] - x[57])**2 + (x[16] - x[58])**2 - 0.1075) + (4*delta + 4*x[14] - 4*x[3])*((-x[15] + 0.5)**2 + (-x[16] + x[4])**2 + (-delta - x[14] + x[3])**2 - 0.3025), (4*x[15] - 2.0)*((-x[15] + 0.5)**2 + (-x[16] + x[4])**2 + (-delta - x[14] + x[3])**2 - 0.3025) + (4*x[15] - 4*x[21])*((x[14] - x[20])**2 + (x[15] - x[21])**2 + (x[16] - x[22])**2 - 0.1075) + (4*x[15] - 4*x[57])*((x[14] - x[56])**2 + (x[15] - x[57])**2 + (x[16] - x[58])**2 - 0.1075), (4*x[16] - 4*x[22])*((x[14] - x[20])**2 + (x[15] - x[21])**2 + (x[16] - x[22])**2 - 0.1075) + (4*x[16] - 4*x[4])*((-x[15] + 0.5)**2 + (-x[16] + x[4])**2 + (-delta - x[14] + x[3])**2 - 0.3025) + (4*x[16] - 4*x[58])*((x[14] - x[56])**2 + (x[15] - x[57])**2 + (x[16] - x[58])**2 - 0.1075), (4*x[17] - 1.4)*((-x[17] + 0.35)**2 + (-x[18] + 0.5)**2 + (-x[19] + 0.75)**2 - 0.1075) + (4*x[17] - 4*x[23])*((x[17] - x[23])**2 + (x[18] - x[24])**2 + (x[19] - x[25])**2 - 0.3025) + (4*x[17] - 4*x[53])*((x[17] - x[53])**2 + (x[19] - x[55])**2 + (x[18] - x[54] - x[65])**2 - 0.1075), (4*x[18] - 2.0)*((-x[17] + 0.35)**2 + (-x[18] + 0.5)**2 + (-x[19] + 0.75)**2 - 0.1075) + (4*x[18] - 4*x[24])*((x[17] - x[23])**2 + (x[18] - x[24])**2 + (x[19] - x[25])**2 - 0.3025) + (4*x[18] - 4*x[54] - 4*x[65])*((x[17] - x[53])**2 + (x[19] - x[55])**2 + (x[18] - x[54] - x[65])**2 - 0.1075), (4*x[19] - 3.0)*((-x[17] + 0.35)**2 + (-x[18] + 0.5)**2 + (-x[19] + 0.75)**2 - 0.1075) + (4*x[19] - 4*x[25])*((x[17] - x[23])**2 + (x[18] - x[24])**2 + (x[19] - x[25])**2 - 0.3025) + (4*x[19] - 4*x[55])*((x[17] - x[53])**2 + (x[19] - x[55])**2 + (x[18] - x[54] - x[65])**2 - 0.1075), (-4*x[14] + 4*x[20])*((x[14] - x[20])**2 + (x[15] - x[21])**2 + (x[16] - x[22])**2 - 0.1075) + (4*x[20] - 4*x[62])*((x[20] - x[62])**2 + (x[21] - x[63])**2 + (x[22] - x[64])**2 - 0.3025) + (4*delta + 4*x[20] - 4*x[47])*((-x[22] + x[49])**2 + (-delta - x[20] + x[47])**2 + (-x[21] + x[48] + x[65])**2 - 0.1075), (-4*x[15] + 4*x[21])*((x[14] - x[20])**2 + (x[15] - x[21])**2 + (x[16] - x[22])**2 - 0.1075) + (4*x[21] - 4*x[63])*((x[20] - x[62])**2 + (x[21] - x[63])**2 + (x[22] - x[64])**2 - 0.3025) + (4*x[21] - 4*x[48] - 4*x[65])*((-x[22] + x[49])**2 + (-delta - x[20] + x[47])**2 + (-x[21] + x[48] + x[65])**2 - 0.1075), (-4*x[16] + 4*x[22])*((x[14] - x[20])**2 + (x[15] - x[21])**2 + (x[16] - x[22])**2 - 0.1075) + (4*x[22] - 4*x[49])*((-x[22] + x[49])**2 + (-delta - x[20] + x[47])**2 + (-x[21] + x[48] + x[65])**2 - 0.1075) + (4*x[22] - 4*x[64])*((x[20] - x[62])**2 + (x[21] - x[63])**2 + (x[22] - x[64])**2 - 0.3025), (-4*x[17] + 4*x[23])*((x[17] - x[23])**2 + (x[18] - x[24])**2 + (x[19] - x[25])**2 - 0.3025) + (4*x[23] - 4*x[50])*((x[23] - x[50])**2 + (x[24] - x[51])**2 + (x[25] - x[52])**2 - 0.1075) + (4*x[23] - 4*x[8])*((x[10] - x[25])**2 + (-x[23] + x[8])**2 + (-x[24] + x[9])**2 - 0.1075), (-4*x[18] + 4*x[24])*((x[17] - x[23])**2 + (x[18] - x[24])**2 + (x[19] - x[25])**2 - 0.3025) + (4*x[24] - 4*x[51])*((x[23] - x[50])**2 + (x[24] - x[51])**2 + (x[25] - x[52])**2 - 0.1075) + (4*x[24] - 4*x[9])*((x[10] - x[25])**2 + (-x[23] + x[8])**2 + (-x[24] + x[9])**2 - 0.1075), (-4*x[10] + 4*x[25])*((x[10] - x[25])**2 + (-x[23] + x[8])**2 + (-x[24] + x[9])**2 - 0.1075) + (-4*x[19] + 4*x[25])*((x[17] - x[23])**2 + (x[18] - x[24])**2 + (x[19] - x[25])**2 - 0.3025) + (4*x[25] - 4*x[52])*((x[23] - x[50])**2 + (x[24] - x[51])**2 + (x[25] - x[52])**2 - 0.1075), (4*x[26] - 1.4)*((-x[26] + 0.35)**2 + (-x[27] + 0.5)**2 + (-x[28] + 0.75)**2 - 0.1075) + (4*x[26] - 4*x[29])*((x[26] - x[29])**2 + (x[27] - x[30])**2 + (x[28] - x[31] - x[66])**2 - 0.3025) + (4*x[26] - 4*x[53])*((x[26] - x[53])**2 + (x[27] - x[54])**2 + (x[28] - x[55])**2 - 0.1075), (4*x[27] - 2.0)*((-x[26] + 0.35)**2 + (-x[27] + 0.5)**2 + (-x[28] + 0.75)**2 - 0.1075) + (4*x[27] - 4*x[30])*((x[26] - x[29])**2 + (x[27] - x[30])**2 + (x[28] - x[31] - x[66])**2 - 0.3025) + (4*x[27] - 4*x[54])*((x[26] - x[53])**2 + (x[27] - x[54])**2 + (x[28] - x[55])**2 - 0.1075), (4*x[28] - 3.0)*((-x[26] + 0.35)**2 + (-x[27] + 0.5)**2 + (-x[28] + 0.75)**2 - 0.1075) + (4*x[28] - 4*x[55])*((x[26] - x[53])**2 + (x[27] - x[54])**2 + (x[28] - x[55])**2 - 0.1075) + (4*x[28] - 4*x[31] - 4*x[66])*((x[26] - x[29])**2 + (x[27] - x[30])**2 + (x[28] - x[31] - x[66])**2 - 0.3025), (-4*x[11] + 4*x[29])*((x[11] - x[29])**2 + (x[12] - x[30])**2 + (x[13] - x[31])**2 - 0.1075) + (-4*x[26] + 4*x[29])*((x[26] - x[29])**2 + (x[27] - x[30])**2 + (x[28] - x[31] - x[66])**2 - 0.3025) + (4*x[29] - 4*x[44])*((x[29] - x[44])**2 + (x[30] - x[45])**2 + (x[31] - x[46])**2 - 0.1075), (-4*x[12] + 4*x[30])*((x[11] - x[29])**2 + (x[12] - x[30])**2 + (x[13] - x[31])**2 - 0.1075) + (-4*x[27] + 4*x[30])*((x[26] - x[29])**2 + (x[27] - x[30])**2 + (x[28] - x[31] - x[66])**2 - 0.3025) + (4*x[30] - 4*x[45])*((x[29] - x[44])**2 + (x[30] - x[45])**2 + (x[31] - x[46])**2 - 0.1075), (-4*x[13] + 4*x[31])*((x[11] - x[29])**2 + (x[12] - x[30])**2 + (x[13] - x[31])**2 - 0.1075) + (4*x[31] - 4*x[46])*((x[29] - x[44])**2 + (x[30] - x[45])**2 + (x[31] - x[46])**2 - 0.1075) + (-4*x[28] + 4*x[31] + 4*x[66])*((x[26] - x[29])**2 + (x[27] - x[30])**2 + (x[28] - x[31] - x[66])**2 - 0.3025), (4*x[32] - 4*x[35])*((x[32] - x[35])**2 + (x[33] - x[36])**2 + (x[34] - x[37])**2 - 0.1075) + (4*x[32] - 4*x[38])*((-x[32] + x[38])**2 + (-x[34] + x[40])**2 + (-x[33] + x[39] - x[65])**2 - 0.1075) + (4*delta + 4*x[32] - 4*x[47])*((x[33] - x[48])**2 + (x[34] - x[49])**2 + (delta + x[32] - x[47])**2 - 0.3025), (4*x[33] - 4*x[36])*((x[32] - x[35])**2 + (x[33] - x[36])**2 + (x[34] - x[37])**2 - 0.1075) + (4*x[33] - 4*x[48])*((x[33] - x[48])**2 + (x[34] - x[49])**2 + (delta + x[32] - x[47])**2 - 0.3025) + (4*x[33] - 4*x[39] + 4*x[65])*((-x[32] + x[38])**2 + (-x[34] + x[40])**2 + (-x[33] + x[39] - x[65])**2 - 0.1075), (4*x[34] - 4*x[37])*((x[32] - x[35])**2 + (x[33] - x[36])**2 + (x[34] - x[37])**2 - 0.1075) + (4*x[34] - 4*x[40])*((-x[32] + x[38])**2 + (-x[34] + x[40])**2 + (-x[33] + x[39] - x[65])**2 - 0.1075) + (4*x[34] - 4*x[49])*((x[33] - x[48])**2 + (x[34] - x[49])**2 + (delta + x[32] - x[47])**2 - 0.3025), (-4*x[32] + 4*x[35])*((x[32] - x[35])**2 + (x[33] - x[36])**2 + (x[34] - x[37])**2 - 0.1075) + (4*x[35] - 4*x[41])*((x[35] - x[41])**2 + (x[36] - x[42])**2 + (x[37] - x[43])**2 - 0.1075) + (4*x[35] - 4*x[50])*((x[35] - x[50])**2 + (x[37] - x[52])**2 + (x[36] - x[51] + x[65])**2 - 0.3025), (-4*x[33] + 4*x[36])*((x[32] - x[35])**2 + (x[33] - x[36])**2 + (x[34] - x[37])**2 - 0.1075) + (4*x[36] - 4*x[42])*((x[35] - x[41])**2 + (x[36] - x[42])**2 + (x[37] - x[43])**2 - 0.1075) + (4*x[36] - 4*x[51] + 4*x[65])*((x[35] - x[50])**2 + (x[37] - x[52])**2 + (x[36] - x[51] + x[65])**2 - 0.3025), (-4*x[34] + 4*x[37])*((x[32] - x[35])**2 + (x[33] - x[36])**2 + (x[34] - x[37])**2 - 0.1075) + (4*x[37] - 4*x[43])*((x[35] - x[41])**2 + (x[36] - x[42])**2 + (x[37] - x[43])**2 - 0.1075) + (4*x[37] - 4*x[52])*((x[35] - x[50])**2 + (x[37] - x[52])**2 + (x[36] - x[51] + x[65])**2 - 0.3025), (-4*x[32] + 4*x[38])*((-x[32] + x[38])**2 + (-x[34] + x[40])**2 + (-x[33] + x[39] - x[65])**2 - 0.1075) + (4*x[38] - 4*x[41])*((-x[38] + x[41])**2 + (-x[39] + x[42] + x[65])**2 + (-x[40] + x[43] - x[66])**2 - 0.1075) + (4*x[38] - 4*x[44])*((x[38] - x[44])**2 + (x[40] - x[46])**2 + (x[39] - x[45] - x[65])**2 - 0.3025), (-4*x[33] + 4*x[39] - 4*x[65])*((-x[32] + x[38])**2 + (-x[34] + x[40])**2 + (-x[33] + x[39] - x[65])**2 - 0.1075) + (4*x[39] - 4*x[42] - 4*x[65])*((-x[38] + x[41])**2 + (-x[39] + x[42] + x[65])**2 + (-x[40] + x[43] - x[66])**2 - 0.1075) + (4*x[39] - 4*x[45] - 4*x[65])*((x[38] - x[44])**2 + (x[40] - x[46])**2 + (x[39] - x[45] - x[65])**2 - 0.3025), (-4*x[34] + 4*x[40])*((-x[32] + x[38])**2 + (-x[34] + x[40])**2 + (-x[33] + x[39] - x[65])**2 - 0.1075) + (4*x[40] - 4*x[46])*((x[38] - x[44])**2 + (x[40] - x[46])**2 + (x[39] - x[45] - x[65])**2 - 0.3025) + (4*x[40] - 4*x[43] + 4*x[66])*((-x[38] + x[41])**2 + (-x[39] + x[42] + x[65])**2 + (-x[40] + x[43] - x[66])**2 - 0.1075), (-4*x[35] + 4*x[41])*((x[35] - x[41])**2 + (x[36] - x[42])**2 + (x[37] - x[43])**2 - 0.1075) + (-4*x[38] + 4*x[41])*((-x[38] + x[41])**2 + (-x[39] + x[42] + x[65])**2 + (-x[40] + x[43] - x[66])**2 - 0.1075) + (4*x[41] - 4*x[53])*((x[41] - x[53])**2 + (x[42] - x[54])**2 + (x[43] - x[55])**2 - 0.3025), (-4*x[36] + 4*x[42])*((x[35] - x[41])**2 + (x[36] - x[42])**2 + (x[37] - x[43])**2 - 0.1075) + (4*x[42] - 4*x[54])*((x[41] - x[53])**2 + (x[42] - x[54])**2 + (x[43] - x[55])**2 - 0.3025) + (-4*x[39] + 4*x[42] + 4*x[65])*((-x[38] + x[41])**2 + (-x[39] + x[42] + x[65])**2 + (-x[40] + x[43] - x[66])**2 - 0.1075), (-4*x[37] + 4*x[43])*((x[35] - x[41])**2 + (x[36] - x[42])**2 + (x[37] - x[43])**2 - 0.1075) + (4*x[43] - 4*x[55])*((x[41] - x[53])**2 + (x[42] - x[54])**2 + (x[43] - x[55])**2 - 0.3025) + (-4*x[40] + 4*x[43] - 4*x[66])*((-x[38] + x[41])**2 + (-x[39] + x[42] + x[65])**2 + (-x[40] + x[43] - x[66])**2 - 0.1075), (-4*x[29] + 4*x[44])*((x[29] - x[44])**2 + (x[30] - x[45])**2 + (x[31] - x[46])**2 - 0.1075) + (-4*x[38] + 4*x[44])*((x[38] - x[44])**2 + (x[40] - x[46])**2 + (x[39] - x[45] - x[65])**2 - 0.3025) + (4*x[44] - 4*x[59])*((x[44] - x[59])**2 + (x[45] - x[60])**2 + (x[46] - x[61] + x[66])**2 - 0.1075), (-4*x[30] + 4*x[45])*((x[29] - x[44])**2 + (x[30] - x[45])**2 + (x[31] - x[46])**2 - 0.1075) + (4*x[45] - 4*x[60])*((x[44] - x[59])**2 + (x[45] - x[60])**2 + (x[46] - x[61] + x[66])**2 - 0.1075) + (-4*x[39] + 4*x[45] + 4*x[65])*((x[38] - x[44])**2 + (x[40] - x[46])**2 + (x[39] - x[45] - x[65])**2 - 0.3025), (-4*x[31] + 4*x[46])*((x[29] - x[44])**2 + (x[30] - x[45])**2 + (x[31] - x[46])**2 - 0.1075) + (-4*x[40] + 4*x[46])*((x[38] - x[44])**2 + (x[40] - x[46])**2 + (x[39] - x[45] - x[65])**2 - 0.3025) + (4*x[46] - 4*x[61] + 4*x[66])*((x[44] - x[59])**2 + (x[45] - x[60])**2 + (x[46] - x[61] + x[66])**2 - 0.1075), (-4*delta - 4*x[20] + 4*x[47])*((-x[22] + x[49])**2 + (-delta - x[20] + x[47])**2 + (-x[21] + x[48] + x[65])**2 - 0.1075) + (-4*delta - 4*x[32] + 4*x[47])*((x[33] - x[48])**2 + (x[34] - x[49])**2 + (delta + x[32] - x[47])**2 - 0.3025) + (-4*delta + 4*x[47] - 4*x[56])*((-x[48] + x[57])**2 + (-x[49] + x[58])**2 + (delta - x[47] + x[56])**2 - 0.1075), (-4*x[33] + 4*x[48])*((x[33] - x[48])**2 + (x[34] - x[49])**2 + (delta + x[32] - x[47])**2 - 0.3025) + (4*x[48] - 4*x[57])*((-x[48] + x[57])**2 + (-x[49] + x[58])**2 + (delta - x[47] + x[56])**2 - 0.1075) + (-4*x[21] + 4*x[48] + 4*x[65])*((-x[22] + x[49])**2 + (-delta - x[20] + x[47])**2 + (-x[21] + x[48] + x[65])**2 - 0.1075), (-4*x[22] + 4*x[49])*((-x[22] + x[49])**2 + (-delta - x[20] + x[47])**2 + (-x[21] + x[48] + x[65])**2 - 0.1075) + (-4*x[34] + 4*x[49])*((x[33] - x[48])**2 + (x[34] - x[49])**2 + (delta + x[32] - x[47])**2 - 0.3025) + (4*x[49] - 4*x[58])*((-x[48] + x[57])**2 + (-x[49] + x[58])**2 + (delta - x[47] + x[56])**2 - 0.1075), (-4*x[23] + 4*x[50])*((x[23] - x[50])**2 + (x[24] - x[51])**2 + (x[25] - x[52])**2 - 0.1075) + (-4*x[35] + 4*x[50])*((x[35] - x[50])**2 + (x[37] - x[52])**2 + (x[36] - x[51] + x[65])**2 - 0.3025) + (4*x[50] - 4*x[62])*((x[50] - x[62])**2 + (x[51] - x[63])**2 + (x[52] - x[64])**2 - 0.1075), (-4*x[24] + 4*x[51])*((x[23] - x[50])**2 + (x[24] - x[51])**2 + (x[25] - x[52])**2 - 0.1075) + (4*x[51] - 4*x[63])*((x[50] - x[62])**2 + (x[51] - x[63])**2 + (x[52] - x[64])**2 - 0.1075) + (-4*x[36] + 4*x[51] - 4*x[65])*((x[35] - x[50])**2 + (x[37] - x[52])**2 + (x[36] - x[51] + x[65])**2 - 0.3025), (-4*x[25] + 4*x[52])*((x[23] - x[50])**2 + (x[24] - x[51])**2 + (x[25] - x[52])**2 - 0.1075) + (-4*x[37] + 4*x[52])*((x[35] - x[50])**2 + (x[37] - x[52])**2 + (x[36] - x[51] + x[65])**2 - 0.3025) + (4*x[52] - 4*x[64])*((x[50] - x[62])**2 + (x[51] - x[63])**2 + (x[52] - x[64])**2 - 0.1075), (-4*x[17] + 4*x[53])*((x[17] - x[53])**2 + (x[19] - x[55])**2 + (x[18] - x[54] - x[65])**2 - 0.1075) + (-4*x[26] + 4*x[53])*((x[26] - x[53])**2 + (x[27] - x[54])**2 + (x[28] - x[55])**2 - 0.1075) + (-4*x[41] + 4*x[53])*((x[41] - x[53])**2 + (x[42] - x[54])**2 + (x[43] - x[55])**2 - 0.3025), (-4*x[27] + 4*x[54])*((x[26] - x[53])**2 + (x[27] - x[54])**2 + (x[28] - x[55])**2 - 0.1075) + (-4*x[42] + 4*x[54])*((x[41] - x[53])**2 + (x[42] - x[54])**2 + (x[43] - x[55])**2 - 0.3025) + (-4*x[18] + 4*x[54] + 4*x[65])*((x[17] - x[53])**2 + (x[19] - x[55])**2 + (x[18] - x[54] - x[65])**2 - 0.1075), (-4*x[19] + 4*x[55])*((x[17] - x[53])**2 + (x[19] - x[55])**2 + (x[18] - x[54] - x[65])**2 - 0.1075) + (-4*x[28] + 4*x[55])*((x[26] - x[53])**2 + (x[27] - x[54])**2 + (x[28] - x[55])**2 - 0.1075) + (-4*x[43] + 4*x[55])*((x[41] - x[53])**2 + (x[42] - x[54])**2 + (x[43] - x[55])**2 - 0.3025), (-4*x[14] + 4*x[56])*((x[14] - x[56])**2 + (x[15] - x[57])**2 + (x[16] - x[58])**2 - 0.1075) + (4*x[56] - 4*x[59])*((x[56] - x[59])**2 + (x[57] - x[60])**2 + (x[58] - x[61] + x[66])**2 - 0.3025) + (4*delta - 4*x[47] + 4*x[56])*((-x[48] + x[57])**2 + (-x[49] + x[58])**2 + (delta - x[47] + x[56])**2 - 0.1075), (-4*x[15] + 4*x[57])*((x[14] - x[56])**2 + (x[15] - x[57])**2 + (x[16] - x[58])**2 - 0.1075) + (-4*x[48] + 4*x[57])*((-x[48] + x[57])**2 + (-x[49] + x[58])**2 + (delta - x[47] + x[56])**2 - 0.1075) + (4*x[57] - 4*x[60])*((x[56] - x[59])**2 + (x[57] - x[60])**2 + (x[58] - x[61] + x[66])**2 - 0.3025), (-4*x[16] + 4*x[58])*((x[14] - x[56])**2 + (x[15] - x[57])**2 + (x[16] - x[58])**2 - 0.1075) + (-4*x[49] + 4*x[58])*((-x[48] + x[57])**2 + (-x[49] + x[58])**2 + (delta - x[47] + x[56])**2 - 0.1075) + (4*x[58] - 4*x[61] + 4*x[66])*((x[56] - x[59])**2 + (x[57] - x[60])**2 + (x[58] - x[61] + x[66])**2 - 0.3025), (-4*x[44] + 4*x[59])*((x[44] - x[59])**2 + (x[45] - x[60])**2 + (x[46] - x[61] + x[66])**2 - 0.1075) + (-4*x[56] + 4*x[59])*((x[56] - x[59])**2 + (x[57] - x[60])**2 + (x[58] - x[61] + x[66])**2 - 0.3025) + (4*delta - 4*x[11] + 4*x[59])*((x[12] - x[60])**2 + (-delta + x[11] - x[59])**2 + (x[13] - x[61] + x[66])**2 - 0.1075), (-4*x[12] + 4*x[60])*((x[12] - x[60])**2 + (-delta + x[11] - x[59])**2 + (x[13] - x[61] + x[66])**2 - 0.1075) + (-4*x[45] + 4*x[60])*((x[44] - x[59])**2 + (x[45] - x[60])**2 + (x[46] - x[61] + x[66])**2 - 0.1075) + (-4*x[57] + 4*x[60])*((x[56] - x[59])**2 + (x[57] - x[60])**2 + (x[58] - x[61] + x[66])**2 - 0.3025), (-4*x[13] + 4*x[61] - 4*x[66])*((x[12] - x[60])**2 + (-delta + x[11] - x[59])**2 + (x[13] - x[61] + x[66])**2 - 0.1075) + (-4*x[46] + 4*x[61] - 4*x[66])*((x[44] - x[59])**2 + (x[45] - x[60])**2 + (x[46] - x[61] + x[66])**2 - 0.1075) + (-4*x[58] + 4*x[61] - 4*x[66])*((x[56] - x[59])**2 + (x[57] - x[60])**2 + (x[58] - x[61] + x[66])**2 - 0.3025), (-4*x[20] + 4*x[62])*((x[20] - x[62])**2 + (x[21] - x[63])**2 + (x[22] - x[64])**2 - 0.3025) + (-4*x[50] + 4*x[62])*((x[50] - x[62])**2 + (x[51] - x[63])**2 + (x[52] - x[64])**2 - 0.1075) + (4*delta + 4*x[62] - 4*x[8])*((x[10] - x[64])**2 + (-x[63] + x[9])**2 + (-delta - x[62] + x[8])**2 - 0.1075), (-4*x[21] + 4*x[63])*((x[20] - x[62])**2 + (x[21] - x[63])**2 + (x[22] - x[64])**2 - 0.3025) + (-4*x[51] + 4*x[63])*((x[50] - x[62])**2 + (x[51] - x[63])**2 + (x[52] - x[64])**2 - 0.1075) + (4*x[63] - 4*x[9])*((x[10] - x[64])**2 + (-x[63] + x[9])**2 + (-delta - x[62] + x[8])**2 - 0.1075), (-4*x[10] + 4*x[64])*((x[10] - x[64])**2 + (-x[63] + x[9])**2 + (-delta - x[62] + x[8])**2 - 0.1075) + (-4*x[22] + 4*x[64])*((x[20] - x[62])**2 + (x[21] - x[63])**2 + (x[22] - x[64])**2 - 0.3025) + (-4*x[52] + 4*x[64])*((x[50] - x[62])**2 + (x[51] - x[63])**2 + (x[52] - x[64])**2 - 0.1075), (-4*x[18] + 4*x[54] + 4*x[65])*((x[17] - x[53])**2 + (x[19] - x[55])**2 + (x[18] - x[54] - x[65])**2 - 0.1075) + (-4*x[21] + 4*x[48] + 4*x[65])*((-x[22] + x[49])**2 + (-delta - x[20] + x[47])**2 + (-x[21] + x[48] + x[65])**2 - 0.1075) + (4*x[33] - 4*x[39] + 4*x[65])*((-x[32] + x[38])**2 + (-x[34] + x[40])**2 + (-x[33] + x[39] - x[65])**2 - 0.1075) + (4*x[36] - 4*x[51] + 4*x[65])*((x[35] - x[50])**2 + (x[37] - x[52])**2 + (x[36] - x[51] + x[65])**2 - 0.3025) + (-4*x[39] + 4*x[42] + 4*x[65])*((-x[38] + x[41])**2 + (-x[39] + x[42] + x[65])**2 + (-x[40] + x[43] - x[66])**2 - 0.1075) + (-4*x[39] + 4*x[45] + 4*x[65])*((x[38] - x[44])**2 + (x[40] - x[46])**2 + (x[39] - x[45] - x[65])**2 - 0.3025), (4*x[13] - 4*x[61] + 4*x[66])*((x[12] - x[60])**2 + (-delta + x[11] - x[59])**2 + (x[13] - x[61] + x[66])**2 - 0.1075) + (-4*x[28] + 4*x[31] + 4*x[66])*((x[26] - x[29])**2 + (x[27] - x[30])**2 + (x[28] - x[31] - x[66])**2 - 0.3025) + (4*x[2] + 4*x[66] - 3.0)*((-x[0] + 0.9)**2 + (-x[1] + 0.5)**2 + (-x[2] - x[66] + 0.75)**2 - 0.1075) + (4*x[40] - 4*x[43] + 4*x[66])*((-x[38] + x[41])**2 + (-x[39] + x[42] + x[65])**2 + (-x[40] + x[43] - x[66])**2 - 0.1075) + (4*x[46] - 4*x[61] + 4*x[66])*((x[44] - x[59])**2 + (x[45] - x[60])**2 + (x[46] - x[61] + x[66])**2 - 0.1075) + (4*x[58] - 4*x[61] + 4*x[66])*((x[56] - x[59])**2 + (x[57] - x[60])**2 + (x[58] - x[61] + x[66])**2 - 0.3025)]
    return deriv

def f(x):
    f = [(-x[0] + 0.9)**2 + (-x[1] + 0.5)**2 + (-x[2] - x[66] + 0.75)**2 - 0.1075, (-x[5] + 0.9)**2 + (-x[6] + 0.5)**2 + (-x[7] + 0.75)**2 - 0.1075, (-x[26] + 0.35)**2 + (-x[27] + 0.5)**2 + (-x[28] + 0.75)**2 - 0.1075, (-x[17] + 0.35)**2 + (-x[18] + 0.5)**2 + (-x[19] + 0.75)**2 - 0.1075, (x[41] - x[53])**2 + (x[42] - x[54])**2 + (x[43] - x[55])**2 - 0.3025, (x[35] - x[41])**2 + (x[36] - x[42])**2 + (x[37] - x[43])**2 - 0.1075, (x[26] - x[53])**2 + (x[27] - x[54])**2 + (x[28] - x[55])**2 - 0.1075, (x[17] - x[53])**2 + (x[19] - x[55])**2 + (x[18] - x[54] - x[65])**2 - 0.1075, (-x[38] + x[41])**2 + (-x[39] + x[42] + x[65])**2 + (-x[40] + x[43] - x[66])**2 - 0.1075, (x[17] - x[23])**2 + (x[18] - x[24])**2 + (x[19] - x[25])**2 - 0.3025, (x[10] - x[25])**2 + (-x[23] + x[8])**2 + (-x[24] + x[9])**2 - 0.1075, (x[23] - x[50])**2 + (x[24] - x[51])**2 + (x[25] - x[52])**2 - 0.1075, (-x[10] + x[7])**2 + (x[5] - x[8])**2 + (x[6] - x[9])**2 - 0.3025, (x[10] - x[64])**2 + (-x[63] + x[9])**2 + (-delta - x[62] + x[8])**2 - 0.1075, (x[3] - x[5])**2 + (x[4] - x[7])**2 + (-x[6] + 0.5)**2 - 0.1075, (x[0] - x[11])**2 + (-x[12] + x[1])**2 + (-x[13] + x[2])**2 - 0.3025, (x[0] - x[3])**2 + (x[1] - 0.5)**2 + (x[2] - x[4])**2 - 0.1075, (x[11] - x[29])**2 + (x[12] - x[30])**2 + (x[13] - x[31])**2 - 0.1075, (x[20] - x[62])**2 + (x[21] - x[63])**2 + (x[22] - x[64])**2 - 0.3025, (x[14] - x[20])**2 + (x[15] - x[21])**2 + (x[16] - x[22])**2 - 0.1075, (x[50] - x[62])**2 + (x[51] - x[63])**2 + (x[52] - x[64])**2 - 0.1075, (-x[22] + x[49])**2 + (-delta - x[20] + x[47])**2 + (-x[21] + x[48] + x[65])**2 - 0.1075, (x[35] - x[50])**2 + (x[37] - x[52])**2 + (x[36] - x[51] + x[65])**2 - 0.3025, (x[32] - x[35])**2 + (x[33] - x[36])**2 + (x[34] - x[37])**2 - 0.1075, (x[33] - x[48])**2 + (x[34] - x[49])**2 + (delta + x[32] - x[47])**2 - 0.3025, (-x[48] + x[57])**2 + (-x[49] + x[58])**2 + (delta - x[47] + x[56])**2 - 0.1075, (-x[32] + x[38])**2 + (-x[34] + x[40])**2 + (-x[33] + x[39] - x[65])**2 - 0.1075, (x[12] - x[60])**2 + (-delta + x[11] - x[59])**2 + (x[13] - x[61] + x[66])**2 - 0.1075, (x[56] - x[59])**2 + (x[57] - x[60])**2 + (x[58] - x[61] + x[66])**2 - 0.3025, (x[44] - x[59])**2 + (x[45] - x[60])**2 + (x[46] - x[61] + x[66])**2 - 0.1075, (x[14] - x[56])**2 + (x[15] - x[57])**2 + (x[16] - x[58])**2 - 0.1075, (x[38] - x[44])**2 + (x[40] - x[46])**2 + (x[39] - x[45] - x[65])**2 - 0.3025, (x[29] - x[44])**2 + (x[30] - x[45])**2 + (x[31] - x[46])**2 - 0.1075, (x[26] - x[29])**2 + (x[27] - x[30])**2 + (x[28] - x[31] - x[66])**2 - 0.3025, (-x[15] + 0.5)**2 + (-x[16] + x[4])**2 + (-delta - x[14] + x[3])**2 - 0.3025]
    return f

def df(x):
    df =[[2*x[0] - 1.8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[0] - 2*x[11], 2*x[0] - 2*x[3], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2*x[1] - 1.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[12] + 2*x[1], 2*x[1] - 1.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [2*x[2] + 2*x[66] - 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[13] + 2*x[2], 2*x[2] - 2*x[4], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[3] - 2*x[5], 0, -2*x[0] + 2*x[3], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*delta - 2*x[14] + 2*x[3]], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[4] - 2*x[7], 0, -2*x[2] + 2*x[4], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[16] + 2*x[4]], [0, 2*x[5] - 1.8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[5] - 2*x[8], 0, -2*x[3] + 2*x[5], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2*x[6] - 1.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[6] - 2*x[9], 0, 2*x[6] - 1.0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 2*x[7] - 1.5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[10] + 2*x[7], 0, -2*x[4] + 2*x[7], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[23] + 2*x[8], 0, -2*x[5] + 2*x[8], -2*delta - 2*x[62] + 2*x[8], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[24] + 2*x[9], 0, -2*x[6] + 2*x[9], -2*x[63] + 2*x[9], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[10] - 2*x[25], 0, 2*x[10] - 2*x[7], 2*x[10] - 2*x[64], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[0] + 2*x[11], 0, 2*x[11] - 2*x[29], 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*delta + 2*x[11] - 2*x[59], 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[12] - 2*x[1], 0, 2*x[12] - 2*x[30], 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[12] - 2*x[60], 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[13] - 2*x[2], 0, 2*x[13] - 2*x[31], 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[13] - 2*x[61] + 2*x[66], 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[14] - 2*x[20], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[14] - 2*x[56], 0, 0, 0, 2*delta + 2*x[14] - 2*x[3]], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[15] - 2*x[21], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[15] - 2*x[57], 0, 0, 0, 2*x[15] - 1.0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[16] - 2*x[22], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[16] - 2*x[58], 0, 0, 0, 2*x[16] - 2*x[4]], [0, 0, 0, 2*x[17] - 0.7, 0, 0, 0, 2*x[17] - 2*x[53], 0, 2*x[17] - 2*x[23], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2*x[18] - 1.0, 0, 0, 0, 2*x[18] - 2*x[54] - 2*x[65], 0, 2*x[18] - 2*x[24], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 2*x[19] - 1.5, 0, 0, 0, 2*x[19] - 2*x[55], 0, 2*x[19] - 2*x[25], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[20] - 2*x[62], -2*x[14] + 2*x[20], 0, 2*delta + 2*x[20] - 2*x[47], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[21] - 2*x[63], -2*x[15] + 2*x[21], 0, 2*x[21] - 2*x[48] - 2*x[65], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[22] - 2*x[64], -2*x[16] + 2*x[22], 0, 2*x[22] - 2*x[49], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[17] + 2*x[23], 2*x[23] - 2*x[8], 2*x[23] - 2*x[50], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[18] + 2*x[24], 2*x[24] - 2*x[9], 2*x[24] - 2*x[51], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[19] + 2*x[25], -2*x[10] + 2*x[25], 2*x[25] - 2*x[52], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 2*x[26] - 0.7, 0, 0, 0, 2*x[26] - 2*x[53], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[26] - 2*x[29], 0], [0, 0, 2*x[27] - 1.0, 0, 0, 0, 2*x[27] - 2*x[54], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[27] - 2*x[30], 0], [0, 0, 2*x[28] - 1.5, 0, 0, 0, 2*x[28] - 2*x[55], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[28] - 2*x[31] - 2*x[66], 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[11] + 2*x[29], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[29] - 2*x[44], -2*x[26] + 2*x[29], 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[12] + 2*x[30], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[30] - 2*x[45], -2*x[27] + 2*x[30], 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[13] + 2*x[31], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[31] - 2*x[46], -2*x[28] + 2*x[31] + 2*x[66], 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[32] - 2*x[35], 2*delta + 2*x[32] - 2*x[47], 0, 2*x[32] - 2*x[38], 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[33] - 2*x[36], 2*x[33] - 2*x[48], 0, 2*x[33] - 2*x[39] + 2*x[65], 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[34] - 2*x[37], 2*x[34] - 2*x[49], 0, 2*x[34] - 2*x[40], 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2*x[35] - 2*x[41], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[35] - 2*x[50], -2*x[32] + 2*x[35], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2*x[36] - 2*x[42], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[36] - 2*x[51] + 2*x[65], -2*x[33] + 2*x[36], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 2*x[37] - 2*x[43], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[37] - 2*x[52], -2*x[34] + 2*x[37], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2*x[38] - 2*x[41], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[32] + 2*x[38], 0, 0, 0, 0, 2*x[38] - 2*x[44], 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2*x[39] - 2*x[42] - 2*x[65], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[33] + 2*x[39] - 2*x[65], 0, 0, 0, 0, 2*x[39] - 2*x[45] - 2*x[65], 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 2*x[40] - 2*x[43] + 2*x[66], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[34] + 2*x[40], 0, 0, 0, 0, 2*x[40] - 2*x[46], 0, 0, 0], [0, 0, 0, 0, 2*x[41] - 2*x[53], -2*x[35] + 2*x[41], 0, 0, -2*x[38] + 2*x[41], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2*x[42] - 2*x[54], -2*x[36] + 2*x[42], 0, 0, -2*x[39] + 2*x[42] + 2*x[65], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 2*x[43] - 2*x[55], -2*x[37] + 2*x[43], 0, 0, -2*x[40] + 2*x[43] - 2*x[66], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[44] - 2*x[59], 0, -2*x[38] + 2*x[44], -2*x[29] + 2*x[44], 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[45] - 2*x[60], 0, -2*x[39] + 2*x[45] + 2*x[65], -2*x[30] + 2*x[45], 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[46] - 2*x[61] + 2*x[66], 0, -2*x[40] + 2*x[46], -2*x[31] + 2*x[46], 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*delta - 2*x[20] + 2*x[47], 0, 0, -2*delta - 2*x[32] + 2*x[47], -2*delta + 2*x[47] - 2*x[56], 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[21] + 2*x[48] + 2*x[65], 0, 0, -2*x[33] + 2*x[48], 2*x[48] - 2*x[57], 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[22] + 2*x[49], 0, 0, -2*x[34] + 2*x[49], 2*x[49] - 2*x[58], 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[23] + 2*x[50], 0, 0, 0, 0, 0, 0, 0, 0, 2*x[50] - 2*x[62], 0, -2*x[35] + 2*x[50], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[24] + 2*x[51], 0, 0, 0, 0, 0, 0, 0, 0, 2*x[51] - 2*x[63], 0, -2*x[36] + 2*x[51] - 2*x[65], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[25] + 2*x[52], 0, 0, 0, 0, 0, 0, 0, 0, 2*x[52] - 2*x[64], 0, -2*x[37] + 2*x[52], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -2*x[41] + 2*x[53], 0, -2*x[26] + 2*x[53], -2*x[17] + 2*x[53], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -2*x[42] + 2*x[54], 0, -2*x[27] + 2*x[54], -2*x[18] + 2*x[54] + 2*x[65], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, -2*x[43] + 2*x[55], 0, -2*x[28] + 2*x[55], -2*x[19] + 2*x[55], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*delta - 2*x[47] + 2*x[56], 0, 0, 2*x[56] - 2*x[59], 0, -2*x[14] + 2*x[56], 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[48] + 2*x[57], 0, 0, 2*x[57] - 2*x[60], 0, -2*x[15] + 2*x[57], 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[49] + 2*x[58], 0, 0, 2*x[58] - 2*x[61] + 2*x[66], 0, -2*x[16] + 2*x[58], 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*delta - 2*x[11] + 2*x[59], -2*x[56] + 2*x[59], -2*x[44] + 2*x[59], 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[12] + 2*x[60], -2*x[57] + 2*x[60], -2*x[45] + 2*x[60], 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[13] + 2*x[61] - 2*x[66], -2*x[58] + 2*x[61] - 2*x[66], -2*x[46] + 2*x[61] - 2*x[66], 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*delta + 2*x[62] - 2*x[8], 0, 0, 0, 0, -2*x[20] + 2*x[62], 0, -2*x[50] + 2*x[62], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[63] - 2*x[9], 0, 0, 0, 0, -2*x[21] + 2*x[63], 0, -2*x[51] + 2*x[63], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[10] + 2*x[64], 0, 0, 0, 0, -2*x[22] + 2*x[64], 0, -2*x[52] + 2*x[64], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, -2*x[18] + 2*x[54] + 2*x[65], -2*x[39] + 2*x[42] + 2*x[65], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2*x[21] + 2*x[48] + 2*x[65], 2*x[36] - 2*x[51] + 2*x[65], 0, 0, 0, 2*x[33] - 2*x[39] + 2*x[65], 0, 0, 0, 0, -2*x[39] + 2*x[45] + 2*x[65], 0, 0, 0], [2*x[2] + 2*x[66] - 1.5, 0, 0, 0, 0, 0, 0, 0, 2*x[40] - 2*x[43] + 2*x[66], 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2*x[13] - 2*x[61] + 2*x[66], 2*x[58] - 2*x[61] + 2*x[66], 2*x[46] - 2*x[61] + 2*x[66], 0, 0, 0, -2*x[28] + 2*x[31] + 2*x[66], 0]]
    return np.matrix(df).T

def backtracking(x,y):
    t=1
    maxIt=100
    i=0
    while((np.linalg.norm(np.array(f(np.add(x,-t*y))))-np.linalg.norm(np.array(f(x))))>0 and i< maxIt):
        t=beta*t
        i+=1
    return t


# use extended Newton-Method to find zero's of polynomial system by randomly pertubating already known zero
def newton_pert(x0):
    x=np.array(x0)
    i=0
    eta1 = 1*10**(-10)
    maxIt=1000

    per = []
    for i in range(len(x0)):
        per.append(np.random.rand(1,1)[0][0]-.5)
    per = np.multiply(eta1,per)

    x=(np.add(x,per))
   
    while(i<maxIt and np.linalg.norm(f(x))>precision):
        psi=df(list(x))
        inv=np.linalg.pinv(psi)                 # use Monroe-Pseudoinverse for Newton-Method to be applicalbe in an underdetermined system
        y=np.array(np.dot(inv,f(x)))
        t=backtracking(x,y[0])
        x=np.add(x,-np.multiply(1*t,y[0]))
        i+=1
  
    return x


def newton(x0):
    i = 0
    x = x0


    maxIt = 100

    while (i < maxIt and np.linalg.norm(f(x)) > precision):

        psi = df(x)
        inv = np.linalg.pinv(
            psi)  # use Monroe-Pseudoinverse for Newton-Method to be applicable in an underdetermined system
        y = np.array(np.dot(inv, f(x)))
        t = backtracking(x, y[0])
        x = np.add(x, -.5*t*y[0])


        i += 1
    if(np.linalg.norm(f(x))>10**(-15)):
        print('Achtung')
    
    return np.array(x)

# gradient descent
def grad_des(x,eta):
    i = 0
    max_It = 1000
    x = np.array(x)
    xnow = 0 * x
    gradnow = 0 * x
    norm =1
    while (i < max_It and norm > 5*10**(-15)):
        grad = np.array(gradient(x,eta))
        norm =np.linalg.norm(list(grad))
        print(norm)
        xprev = xnow
        xnow = x
        s = xnow - xprev
        gradprev = gradnow
        gradnow = grad
        g = gradnow - gradprev
        alpha1 = 0.01*s.dot(g) / np.linalg.norm(g)**2
        
        x = x - alpha1 * grad
        i += 1
   
    return x


#create a point cloud of samples of the algebraic variety locally
def sampling(number_of_samples,x):
    y = []
    for i in range(number_of_samples):
        y.append(list(newton_pert(x)))
    return np.array(y)

#calculate mean value of all coordinate directions
def mean_vector(data):
    mean_vector = []
    for i in range(len(data[0])):
        mean_vector.append(np.mean(data[:,i]))
    return mean_vector

#calculate covariance matrix
def scatter_matrix(data,x0):
    scatter  = np.zeros((len(data[0]),len(data[0])))
    mean = mean_vector(data)
    for i in range(len(data)):
        scatter += np.dot(data[i,:]-mean, (data[i,:]-mean).T)
    return 1/(len(data)-1)*scatter

#calcualte Eigenvalue of covariance matrix
def eigenvalue(scat_matrix):
    return np.linalg.eigh(scat_matrix)




# check if zero is isolated by surounding zero with starting points for Newton, such that every distinct new zero is closer to one of the starting points than the original zero
# cover a simplex plus origin with spheres of radius varying delta on centres of simplex plus origin with known zero centred at
# if there is any other zero in this simplex plus origin at least on vertex of the simplex would converge there under newton
def is_zero_dimensional_newton(x0):
    m = len(x0)
    v = []
    v2=[]
    v_centre = []
    eta =10 ** (-11)  # radius of neighborhood

    # create centre point
    for i in range(m):
        v_centre.append(1 / (m + 1))
    
    # create points on vertices of tetrahedron
    for i in range(m):
        # create coordinates of higherdim. tetrahedron
        coordinate = []
        coordinate2=[]
        for j in range(m):
            k = 0
            if (j + 1 == i): k = 1
            coordinate.append(k)
            # shift centre to x0
        
        coordinate2=eta*np.array(coordinate)-eta*np.array((v_centre))
        coordinate = eta * np.array(coordinate) + np.array(x0) -eta * np.array(v_centre)  # translate tetrahedron to right place (ne
        v.append((coordinate))
        v2.append(coordinate2)

    

    # calculate closest zero to vertices of tetrahedron
    res = []
    for i in range(m):
        res.append(newton((v[i])))
        
    fig1 = plt.figure()
    ax = fig1.add_subplot(111, projection='3d')
    for i in range(len(res)):
        ax.scatter(np.array(res[i][0]), np.array(res[i][1]), np.array(res[i][2]), c='r', marker='.')
    ax.scatter(x0[0], x0[1], x0[2], marker='x')
    plt.show()
    var =[]
    
    for i in range(m):
        var.append(np.linalg.norm(res[i] - x0))
        
    if (1 / (m ) * np.linalg.norm(var) < 10**(-20)):
        print(1 / (m ) * len(var))
        return True,res
    else:
        return False,res
    
    
def is_zero_dimensional_grad_des(x0,eta):

    xr = np.random.rand(len(x0),1)[0]
    bias  =1/2*np.ones((len(x0),1))
    xrand = 2*(xr-bias[0])
    x= eta/np.linalg.norm(xrand)*xrand+np.array(x0)
    #print(len(x))
    y = grad_des(x,eta)
    print(np.linalg.norm(f(y)))
    if (np.linalg.norm(f(y))<10**(-15)):

        return False
    else: return True





    #calculate dimension of algebraic variety by finding the nummber of non-zero Eigenvalues within some precision
def dimensionality_check(x0, sample_number):
    zero= is_zero_dimensional_newton(x0)
    if(zero[0]):
        print('The system has dimension zero')
        return 0
    else:
        print('PCA')
        data = sampling(sample_number,x0)
        scat_matrix=scatter_matrix(data,x0)
        print('Achtung PCA')
        eig_val=mdp.pca(data,svd=True)#igenvalue(scat_matrix)
             #print(eig_val)
        eig_val2 = PCA(data)
        print(list(eig_val2.fracs))
        data -= data.mean(axis=0)

        r = np.cov(data.T)
        evals, evecs = np.linalg.eigh(r)

        # sort eigenvalue in decreasing order
        idx = np.argsort(evals)[::-1]
        evecs = evecs[:, idx]
        # sort eigenvectors according to same index
        evals = evals[idx]
        # select the first n eigenvectors (n is desired dimension
        # of rescaled data array, or dims_rescaled_data)
        print(list(evals))
        #print(np.sqrt(np.abs((eig_val[0]))))
        B=eig_val[0]#np.random.rand(67,67)  #eig_val[1]
        (datanew) = np.dot(np.array(data),np.array(B).T)
        #print(datanew)
        point =np.dot(np.array(B),np.array(x0))
        #datanew = list(datanew)
        #datanew=data
        #print(point)
        #
        #print(len(datanew))
        #print(len(datanew[0]))
        p =[]
       # ((p.append(list(datanew[0][0][0]))).append(list(datanew[1][0][0])))
        print(evecs[2])
        return 1

        fig = plt.figure()
        ax = fig.add_subplot(111, projection='3d')
        for i in range(len(datanew)):
            ax.scatter(np.array(datanew[i][64]),np.array(datanew[i][65]),np.array(datanew[i][66]),c='r',marker='.')
        ax.scatter(point[64],point[65],point[66],c='g', marker='x')
        plt.show()


        if all(np.sqrt(np.abs(eig)) < precision for eig in eig_val[0]):
            print("The system is singular")
            #Assumption: singularities always have tangent cone (translated affine cone (i.e. commplex case in Cox Little O'Shea))
            # and hence have 0 covariance eigenvalues

            #NEW! assumption might not be true, in the sense that there are singularieties with non-zero covariance.

            # if(is_Isolated(data,delta)): print('The system has dimension zero')
            # else: print('The system is singular')
        else:
            poss_dim =sum(np.sqrt(np.abs(eig_val[0]))>precision)
            print("the system has positive dimension smaller than "+str(poss_dim))
            #Assupmtion: Since all singularites are cone like all cases of positive covariance will be at a regular point

            # calculate_dimension(scat_matrix,poss_dim)

            #NEW! Slice system such that directions with zero variance can be checked on singularities










#x=[0,1,1,1]
x= [
    0.75, 0.65, 0.0,
    0.6, 0.25,
    0.75, 0.35, 0.5,
    0.75, 0.9, 0.5,
    0.75, 0.1, 0.0,
    0.15, 0.5, 0.25,
    0.5, 0.75, 0.9,
    0.0, 0.75, 0.1,
    0.5, 0.75, 0.35,
    0.5, 0.25, 0.6,
    0.5, 0.25, 0.15,
    0.4, 0.0, 0.25,
    0.25, 0.15, 0.5,
    0.25, 0.85, 0.0,
    0.1, 0.0, 0.75,
    0.25, 0.4, 0.0,
    0.85, 0.0, 0.25,
    0.25, 0.6, 0.5,
    0.65, 0.0, 0.75,
    0.0, 0.25, 0.4,
    0.0, 0.25, 0.85,
    0.0, 0.75, 0.65,
    1,1

]
print(len(x))
#print(len(gradient(x,10**(-5)) ))
#print((f(x)))
#print(len(df(x)))
#print(df(x))
#sample =sampling(10,x)
#print(sample)
#print(mean_vector(sample))
#print(scatter_matrix(sample))
#print(eigenvalue(scatter_matrix(sample))[0])
#dimensionality_check(x,1000)
print(len(df(x)))
print(np.linalg.matrix_rank(df(x)))
#print(newton_pert(x))
xtest = [0.75000250816470049, 0.64993614619011886, 3.9805848537843542e-05, 0.60002993176306241, 0.2500945566394599, 0.75006668405000854, 0.34990628651655881, 0.50001624464579564, 0.75013810582594498, 0.89990628017310015, 0.49997292335357851, 0.75018824020614361, 0.099936299819883959, 0.00040654325699226388, 0.15002972823404614, 0.49966084910269848, 0.2497646194556461, 0.49992324191087673, 0.74997473553703853, 0.90011879671820039, -1.5139312852070043e-05, 0.74974080824040445, 0.099942886184010732, 0.50012840946935599, 0.74977662080841057, 0.35011887066654429, 0.50005396180922057, 0.24992500785817948, 0.60017908406826037, 0.50001234360693547, 0.2498703121921442, 0.15017907977399619, 0.40002439820050567, -0.00036806715595574541, 0.24968885106291486, 0.24991039697800296, 0.14973010913132739, 0.49956146683383551, 0.24998775241885213, 0.8496939619914825, -0.00032636811225249409, 0.10006109308219586, -0.00060048282863979041, 0.74945324189437623, 0.24979446818521331, 0.39969349253104647, 0.00036576443595194309, 0.85002445589259146, -0.00018988679031170814, 0.24986693264098198, 0.25013218851697033, 0.59973039727939015, 0.50007893306385454, 0.65005997241191926, 3.8142913150121424e-05, 0.7503614782128728, 8.1264901297000723e-05, 0.2497336952003047, 0.3999374401869501, -4.9844907276008363e-05, 0.24986309588130201, 0.8499374710363311, 0.00014552168668188257, 0.74988856370470969, 0.64994284287161452, 1.0, 1.0]


# #print(f(xtest))
# #print(np.linalg.norm(f(xtest)))
# eta = 10**(-5)
# i = 0
# maxI = 1000
# zero =0
# while (i<maxI ):
#     eta -= -10**(-8)
#     j=0
#     it_Max=100000
#     while (j<it_Max):
#         if(not zerofinder(x)):
#             print('zero')
#             zero += 1
#             break
#         else: j+=1
#
#
#
#     print(i)
#     i+=1
#     #if(is_zero_dimensional_grad_des(x,eta)):break
# #print(zero)
# # print(eta)
